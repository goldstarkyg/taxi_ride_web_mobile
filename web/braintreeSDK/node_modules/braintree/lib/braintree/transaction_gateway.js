//@ sourceMappingURL=transaction_gateway.map
// Generated by CoffeeScript 1.6.1
var AddressGateway, ErrorResponse, Gateway, Transaction, TransactionGateway, TransactionSearch, Util, deprecate, exceptions,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

AddressGateway = require('./address_gateway').AddressGateway;

Gateway = require('./gateway').Gateway;

Transaction = require('./transaction').Transaction;

TransactionSearch = require('./transaction_search').TransactionSearch;

ErrorResponse = require('./error_response').ErrorResponse;

Util = require('./util').Util;

exceptions = require('./exceptions');

deprecate = require('depd')('braintree/gateway.transaction');

TransactionGateway = (function(_super) {

  __extends(TransactionGateway, _super);

  function TransactionGateway(gateway) {
    this.gateway = gateway;
    this.config = this.gateway.config;
  }

  TransactionGateway.prototype.cancelRelease = function(transactionId, callback) {
    return this.gateway.http.put("" + (this.config.baseMerchantPath()) + "/transactions/" + transactionId + "/cancel_release", {}, this.responseHandler(callback));
  };

  TransactionGateway.prototype.cloneTransaction = function(transactionId, attributes, callback) {
    return this.gateway.http.post("" + (this.config.baseMerchantPath()) + "/transactions/" + transactionId + "/clone", {
      transactionClone: attributes
    }, this.responseHandler(callback));
  };

  TransactionGateway.prototype.create = function(attributes, callback) {
    return this.gateway.http.post("" + (this.config.baseMerchantPath()) + "/transactions", {
      transaction: attributes
    }, this.responseHandler(callback));
  };

  TransactionGateway.prototype.credit = function(attributes, callback) {
    attributes.type = 'credit';
    return this.create(attributes, callback);
  };

  TransactionGateway.prototype.find = function(transactionId, callback) {
    if (transactionId.trim() === '') {
      return callback(exceptions.NotFoundError("Not Found"), null);
    } else {
      return this.gateway.http.get("" + (this.config.baseMerchantPath()) + "/transactions/" + transactionId, function(err, response) {
        if (err) {
          return callback(err, null);
        } else {
          return callback(null, new Transaction(response.transaction));
        }
      });
    }
  };

  TransactionGateway.prototype.holdInEscrow = function(transactionId, callback) {
    return this.gateway.http.put("" + (this.config.baseMerchantPath()) + "/transactions/" + transactionId + "/hold_in_escrow", {}, this.responseHandler(callback));
  };

  TransactionGateway.prototype.refund = function() {
    var amount_or_options, callback, options, transactionId, _i;
    transactionId = arguments[0], amount_or_options = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
    options = typeof amount_or_options[0] === 'object' ? amount_or_options[0] : {
      amount: amount_or_options[0]
    };
    return this.gateway.http.post("" + (this.config.baseMerchantPath()) + "/transactions/" + transactionId + "/refund", {
      transaction: options
    }, this.responseHandler(callback));
  };

  TransactionGateway.prototype.responseHandler = function(callback) {
    return this.createResponseHandler("transaction", Transaction, callback);
  };

  TransactionGateway.prototype.sale = function(attributes, callback) {
    attributes.type = 'sale';
    Util.verifyKeys(this._createSignature(), attributes, deprecate);
    return this.create(attributes, callback);
  };

  TransactionGateway.prototype.search = function(fn, callback) {
    var search;
    search = new TransactionSearch();
    fn(search);
    return this.createSearchResponse("" + (this.config.baseMerchantPath()) + "/transactions/advanced_search_ids", search, this.pagingFunctionGenerator(search), callback);
  };

  TransactionGateway.prototype.releaseFromEscrow = function(transactionId, callback) {
    return this.gateway.http.put("" + (this.config.baseMerchantPath()) + "/transactions/" + transactionId + "/release_from_escrow", {}, this.responseHandler(callback));
  };

  TransactionGateway.prototype.submitForSettlement = function() {
    var amount, attributes, callback, options, transactionId, _i;
    transactionId = arguments[0], attributes = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
    amount = attributes[0];
    options = attributes[1] || {};
    if (arguments.length > 4) {
      deprecate("Received too many args for submitForSettlement (" + arguments.length + " for 4)");
    }
    Util.verifyKeys(this._submitForSettlementSignature(), options, deprecate);
    return this.gateway.http.put("" + (this.config.baseMerchantPath()) + "/transactions/" + transactionId + "/submit_for_settlement", {
      transaction: {
        amount: amount,
        orderId: options["orderId"],
        descriptor: options["descriptor"]
      }
    }, this.responseHandler(callback));
  };

  TransactionGateway.prototype.updateDetails = function(transactionId, options, callback) {
    Util.verifyKeys(this._updateDetailsSignature(), options, deprecate);
    return this.gateway.http.put("" + (this.config.baseMerchantPath()) + "/transactions/" + transactionId + "/update_details", {
      transaction: options
    }, this.responseHandler(callback));
  };

  TransactionGateway.prototype.submitForPartialSettlement = function() {
    var amount, attributes, callback, options, transactionId, _i;
    transactionId = arguments[0], attributes = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
    amount = attributes[0];
    options = attributes[1] || {};
    Util.verifyKeys(this._submitForSettlementSignature(), options, deprecate);
    return this.gateway.http.post("" + (this.config.baseMerchantPath()) + "/transactions/" + transactionId + "/submit_for_partial_settlement", {
      transaction: {
        amount: amount,
        orderId: options["orderId"],
        descriptor: options["descriptor"]
      }
    }, this.responseHandler(callback));
  };

  TransactionGateway.prototype["void"] = function(transactionId, callback) {
    return this.gateway.http.put("" + (this.config.baseMerchantPath()) + "/transactions/" + transactionId + "/void", null, this.responseHandler(callback));
  };

  TransactionGateway.prototype.pagingFunctionGenerator = function(search) {
    return TransactionGateway.__super__.pagingFunctionGenerator.call(this, search, 'transactions', Transaction, "creditCardTransactions", function(response) {
      return response.creditCardTransactions.transaction;
    });
  };

  TransactionGateway.prototype._submitForSettlementSignature = function() {
    return {
      valid: ["orderId", "descriptor[name]", "descriptor[phone]", "descriptor[url]"]
    };
  };

  TransactionGateway.prototype._updateDetailsSignature = function() {
    return {
      valid: ["amount", "orderId", "descriptor[name]", "descriptor[phone]", "descriptor[url]"]
    };
  };

  TransactionGateway.prototype._createSignature = function() {
    var validKeys;
    validKeys = ["amount", "customerId", "merchantAccountId", "orderId", "channel", "paymentMethodToken", "purchaseOrderNumber", "recurring", "transactionSource", "shippingAddressId", "type", "taxAmount", "taxExempt", "venmoSdkPaymentMethodCode", "deviceSessionId", "serviceFeeAmount", "deviceData", "fraudMerchantId", "billingAddressId", "paymentMethodNonce", "paymentMethodToken", "threeDSecureToken", "sharedPaymentMethodToken", "sharedBillingAddressId", "sharedCustomerId", "sharedShippingAddressId", "riskData", "riskData[customerBrowser]", "riskData[customerIp]", "riskData[customerBrowser]", "creditCard", "creditCard[token]", "creditCard[cardholderName]", "creditCard[cvv]", "creditCard[expirationDate]", "creditCard[expirationMonth]", "creditCard[expirationYear]", "creditCard[number]", "customer", "customer[id]", "customer[company]", "customer[email]", "customer[fax]", "customer[firstName]", "customer[lastName]", "customer[phone]", "customer[website]", "threeDSecurePassThru", "threeDSecurePassThru[eciFlag]", "threeDSecurePassThru[cavv]", "threeDSecurePassThru[xid]", "options", "options[holdInEscrow]", "options[storeInVault]", "options[storeInVaultOnSuccess]", "options[submitForSettlement]", "options[addBillingAddressToPaymentMethod]", "options[storeShippingAddressInVault]", "options[venmoSdkSession]", "options[payeeEmail]", "options[skipAdvancedFraudChecking]", "options[skipAvs]", "options[skipCvv]", "options[paypal]", "options[paypal][customField]", "options[paypal][payeeEmail]", "options[paypal][description]", "options[threeDSecure]", "options[threeDSecure][required]", "options[amexRewards]", "options[amexRewards][requestId]", "options[amexRewards][points]", "options[amexRewards][currencyAmount]", "options[amexRewards][currencyIsoCode]", "descriptor", "descriptor[name]", "descriptor[phone]", "descriptor[url]", "paypalAccount", "paypalAccount[email]", "paypalAccount[token]", "paypalAccount[paypalData]", "paypalAccount[payeeEmail]", "industry", "industry[industryType]", "industry[data]", "industry[data][folioNumber]", "industry[data][checkInDate]", "industry[data][checkOutDate]", "industry[data][travelPackage]", "industry[data][lodgingCheckInDate]", "industry[data][lodgingCheckOutDate]", "industry[data][departureDate]", "industry[data][lodgingName]", "industry[data][roomRate]", "applePayCard", "applePayCard[number]", "applePayCard[cardholderName]", "applePayCard[cryptogram]", "applePayCard[expirationMonth]", "applePayCard[expirationYear]", "androidPayCard", "androidPayCard[number]", "androidPayCard[cryptogram]", "androidPayCard[googleTransactionId]", "androidPayCard[expirationMonth]", "androidPayCard[expirationYear]", "androidPayCard[sourceCardType]", "androidPayCard[sourceCardLastFour]", "androidPayCard[eciIndicator]", "subscriptionId"] + new AddressGateway(this).sharedSignature("shipping") + new AddressGateway(this).sharedSignature("billing");
    return {
      valid: validKeys,
      ignore: ["customFields", "options[paypal][supplementaryData]"]
    };
  };

  return TransactionGateway;

})(Gateway);

exports.TransactionGateway = TransactionGateway;
